{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","newUrl","loading","tabLists","update","_callee","response","regenerator_default","a","wrap","_context","prev","next","axios","get","sent","console","log","data","_this","setState","stop","this","error","_this2","isLoading","react_default","createElement","className","placeholder","type","pattern","title","value","onChange","e","target","onClick","Object","asyncToGenerator","mark","_callee3","_context3","post","url","map","element","index","href","short_url","visits","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1045ae4.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    newUrl: \"\",\n    loading: true,\n    tabLists: []\n  };\n\n  async componentDidMount() {\n    try {\n      this.setState({\n        loading: false\n      });\n      this.update();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  update = async () => {\n    const response = await axios.get(\"http://localhost:8080\");\n    console.log(response.data);\n    this.setState({\n      tabLists: response.data\n    });\n  };\n\n  render() {\n    if (this.state.isLoading === true) {\n      return <p>loading ...</p>;\n    } else {\n      return (\n        <div>\n          <section className=\"title\">\n            <h1>Simplify your links</h1>\n            <div className=\"input-button\">\n              <form>\n                <input\n                  className=\"form-control\"\n                  placeholder=\"Your original URL here\"\n                  type=\"url\"\n                  pattern=\"(https|http)?://.+\"\n                  title=\"Invalid format of URL\"\n                  value={this.state.newUrl}\n                  onChange={e => this.setState({ newUrl: e.target.value })}\n                />\n              </form>\n              <button\n                className=\"button-control\"\n                onClick={async () => {\n                  await axios.post(\"http://localhost:8080/create\", {\n                    url: this.state.newUrl\n                  });\n                  this.setState({ newUrl: \"\" });\n                  this.update();\n                }}\n              >\n                SHORTEN URL\n              </button>\n            </div>\n          </section>\n          <div className=\"container\">\n            <div className=\"greyBox\">\n              <ul className=\"modelUrl\">\n                <li className=\"boxUrl\">\n                  <p>Original URL</p>\n                </li>\n                <li className=\"boxShort\">\n                  <p>Short URL</p>\n                </li>\n                <li className=\"boxVisits\">\n                  <p>visits</p>\n                </li>\n              </ul>\n            </div>\n            <div>\n              {this.state.tabLists.map((element, index) => {\n                return (\n                  <div>\n                    <ul className=\"modelUrl\">\n                      <li className=\"boxUrl\">\n                        <a href={element.url}>{element.url}</a>\n                      </li>\n                      <li className=\"boxShort\">\n                        <a href={element.short_url}>{element.short_url}</a>\n                      </li>\n                      <li className=\"boxVisits\">\n                        <p>{element.visits}</p>\n                      </li>\n                    </ul>\n                    <p className=\"line\" />\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}