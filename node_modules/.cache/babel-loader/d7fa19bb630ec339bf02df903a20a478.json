{"ast":null,"code":"import _objectSpread from \"/Users/silvia/Desktop/Formations/LeReacteur/react/to-do-list/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/silvia/Desktop/Formations/LeReacteur/react/to-do-list/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      newTask: \"\",\n      tabLists: [{\n        name: \"phrase1\",\n        done: true\n      }, {\n        name: \"phrase2\",\n        done: false\n      }, {\n        name: \"phrase3\",\n        done: true\n      }]\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \" => TO Do LiSt <= \"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, this.state.tabLists.map((element, index) => {\n      if (element.done === true) {\n        return React.createElement(\"li\", {\n          key: index,\n          onClick: () => {\n            let tabList2 = [...this.state.tabLists];\n            tabList2[index] = _objectSpread({}, tabList2[index]);\n            tabList2[index].done = !tabList2[index].done; // if(tabList2[index].done === false) {\n            //   tabList2[index].done = true\n            // } else {\n            //   tabList2[index].done = false\n            // }\n\n            this.setState({\n              tabList: tabList2\n            });\n          },\n          className: \"task-done\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, element.name);\n      } else {\n        return React.createElement(\"li\", {\n          key: index,\n          onClick: () => {\n            let tabList2 = [...this.state.tabLists];\n            tabList2[index] = _objectSpread({}, tabList2[index]);\n            tabList2[index].done = !tabList2[index].done; // if(tabList2[index].done === false) {\n            //   tabList2[index].done = true\n            // } else {\n            //   tabList2[index].done = false\n            // }\n\n            this.setState({\n              tabList: tabList2\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, element.name);\n      }\n    })), React.createElement(\"input\", {\n      value: this.state.newTask,\n      onChange: e => this.setState({\n        newTask: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => {\n        let tabList2 = [...this.state.tabLists];\n        tabList2.push({\n          name: this.state.newTask,\n          done: false\n        });\n        this.setState({\n          tabLists: tabList2,\n          newTask: \"\"\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"OK\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/silvia/Desktop/Formations/LeReacteur/react/to-do-list/src/App.js"],"names":["React","App","Component","state","newTask","tabLists","name","done","render","map","element","index","tabList2","setState","tabList","e","target","value","push"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nclass App extends React.Component {\n  state = {\n    newTask: \"\",\n    tabLists: [\n      {\n        name: \"phrase1\",\n        done: true\n      },\n      {\n        name: \"phrase2\",\n        done: false\n      },\n      {\n        name: \"phrase3\",\n        done: true\n      }\n    ]\n  };\n  render() {\n    return (\n      <div>\n        <h1> => TO Do LiSt &lt;= </h1>\n        <ul>\n          {this.state.tabLists.map((element, index) => {\n            if (element.done === true) {\n              return (\n                <li\n                  key={index}\n                  onClick={() => {\n                    let tabList2 = [...this.state.tabLists];\n                    tabList2[index] = { ...tabList2[index] };\n                    tabList2[index].done = !tabList2[index].done;\n                    // if(tabList2[index].done === false) {\n                    //   tabList2[index].done = true\n                    // } else {\n                    //   tabList2[index].done = false\n                    // }\n\n                    this.setState({ tabList: tabList2 });\n                  }}\n                  className=\"task-done\"\n                >\n                  {element.name}\n                </li>\n              );\n            } else {\n              return (\n                <li\n                  key={index}\n                  onClick={() => {\n                    let tabList2 = [...this.state.tabLists];\n                    tabList2[index] = { ...tabList2[index] };\n                    tabList2[index].done = !tabList2[index].done;\n                    // if(tabList2[index].done === false) {\n                    //   tabList2[index].done = true\n                    // } else {\n                    //   tabList2[index].done = false\n                    // }\n\n                    this.setState({ tabList: tabList2 });\n                  }}\n                >\n                  {element.name}\n                </li>\n              );\n            }\n          })}\n        </ul>\n        <input\n          value={this.state.newTask}\n          onChange={e => this.setState({ newTask: e.target.value })}\n        />\n        <button\n          onClick={() => {\n            let tabList2 = [...this.state.tabLists];\n            tabList2.push({ name: this.state.newTask, done: false });\n            this.setState({ tabLists: tabList2, newTask: \"\" });\n          }}\n        >\n          OK\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}